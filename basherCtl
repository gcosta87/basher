#!/bin/bash
#	basherCtl
#		Basher Control
#		Permite controlar y conocer detalles del servicio de Basher.
#
# Autor: Gonzalo Gabriel Costa (twitter.com/gcosta87)
# Ver el archivo LICENSE para la informacion del liberación del codigo de este proyecto.
# web: https://github.com/gcosta87/basher

##
##	CONST
##
source server/constants.sh;
source server/functions.sh;

declare -r DEFAULT_PORT=80
declare -r DEFAULT_BINDIP='localhost'

# Crea el archivo instance.properties para almancenar los valores de la instancia actual.
# $1 (string): IP bindeada
# $2 (integer): puerto
# $3 (integer): process id (pid)
crearArchivoProperties(){
	echo -e "#No modificar este archivo!\n$PROPERTY_KEY_IP=$1\n$PROPERTY_KEY_PORT=$2\n$PROPERTY_KEY_PID=$3" > "$PROPERTY_FILE";
}

##
##	FUNCTIONS
##
#Start the Basher, based on socat, and update the .pid file
#$1 (string): ip o puerto a bindear 
#$2 (integer): puerto (opcional) 
start(){
	port=$DEFAULT_PORT;
	bindIP=$DEFAULT_BINDIP;

	if [[ "$#" -eq 1 ]]
	then
		port=$1;
	else
		if [[ "$#" -eq 2 ]]
		then
			port=$2;
			bindIP=$1;
		fi
	fi

	echo "Comenzando Basher a través de socat...";
	touch "$LOG_FILE";
	socat -lf"$LOG_FILE" -lpBasher -b1400 TCP4-LISTEN:"$port",bind="$bindIP",su=nobody,reuseaddr,fork EXEC:"$BASHER_SCRIPT" &
	
	pid=$!;

	if [ -n "$pid" ]
	then
		sleep 1;
		if [[ -e "/proc/$pid/status" ]]
		then
			crearArchivoProperties "$bindIP" $port $pid
			echo "Escuchando en $bindIP:$port";
			echo "ID de proceso (pid): $pid";
		else
			echo -e 'Error: no ha sido posible comenzar basher!.\nSe produjo un error al ejecutar socat.';
		fi
	else
		echo -e 'Error: no ha sido posible comenzar basher!.\nNo ha sido posible obtener el id del proceso al ejecutar socat!.';
	fi	
}


stop(){
	set -e;
	pid=`readProperty $PROPERTY_KEY_PID`;
	echo "Deteniendo Basher..."
	kill "$pid";
	rm "$PROPERTY_FILE";
	echo "El servicio ha sido detenido!."
	set +e;
}


#Evalua el rendimiento de Basher, en base a medir el tiempo total al responder a N cantidad de request
# $1 (integer, opcional): cantidad  de request a evaluar. Por defecto son 1.000
benchmark(){
	if [[ "$#" -eq 1 ]]
	then
		cantidadRequest=$1;
	else
		cantidadRequest=1000;
	fi
	
	ip=`readProperty $PROPERTY_KEY_IP`;
	port=`readProperty $PROPERTY_KEY_PORT`;

	if [[ "$port" -ne 80 ]]
	then
		portString=":$port";
	else
		portString="";
	fi
	
	echo -e "Comenzando la prueba benchmark:\n\n\tCantidad de peticiones:\t$cantidadRequest\n\tURL de pruebas:\t\thttp://$ip$portString/";
	resultado=`{ time for i in $(seq 1 $cantidadRequest);do GET http://$ip$portString &> /dev/null; done; } 2>&1 | grep real | cut -f2`
	echo -e "\n\n\t\tResultado:\t$resultado";
}

restart(){
	echo "no implementado aun!";
}


status(){
	if [[ -e "$PROPERTY_FILE" ]]
	then
		pid=`readProperty $PROPERTY_KEY_PID`;
		ip=`readProperty $PROPERTY_KEY_IP`;
		port=`readProperty $PROPERTY_KEY_PORT`;

		#se verifica que este corriendo al chequear la existencia del proceso
		if [[ -e "/proc/$pid/status" ]]
		then

			uptime=`basherUptime`; 
			echo -e "Estado:\t\tCorriendo ($pid)";

			#responde a peticiones? 1=Si, 0=No
			responde=`wget -qO- -S "http://$ip:$port" |& grep -m1 Server | grep Basher | wc -l`;
			
			if [[ "$responde" -eq 1 ]]
			then
				echo -e "Responde:\tSi";
			else
				echo -e "Responde:\tNo";
			fi

			echo -e "Uptime:\t\t$uptime";
		else
			#no está ejecutand
			echo -e "Estado:\t\tDetenido (externamente y/o por error)";
		fi
		#Se muestran sus propiedades
		echo -e "\nConfiguracion:"
		echo -e "\tIP:\t$ip";
		echo -e "\tPuerto:\t$port";

	else
		echo -e "Estado:\tDetenido (manualmente)";
	fi
	echo;
}


mostrarAyuda(){
	echo -e 'BasherCtl:\n\tUtilitario para controlar a Basher y conocer su estado.\n\tSolo es posible poner en funcionamiento, y controlar, una única instancia de Basher.\n\nWEB:\n\thttps://github.com/gcosta87/basher\n\nUSO:\n\t$ ./basherCtl OPERACION [argumentos]\n\n';
	echo 'OPERACION:';
	echo -e '\tstart [port|(localhost|ip) port)\n\t\tLanza una instancia de Basher. Es posible asociar (bindear) el servicio a un\n\t\tpuerto y/o interfaz de red. Por defecto se bindea localhost:80.\n\t\tEjemplos:';
	echo -e '\t\t$ ./basherCtl start';
	echo -e '\t\t$ ./basherCtl start 8080';
	echo -e '\t\t$ ./basherCtl start 192.168.100.1 80';
	echo;
	
	echo -e '\tstop\n\t\tDetiene el servicio previamente iniciado.';
	echo;

	echo -e '\trestart\n\t\tReinicializa el servicio con la misma configuracion brindada al lanzarse.';
	echo;


	echo -e '\tstatus\n\t\tMuestra informacion detallada de la instacia que esta corriendo.\n\t\tPodrá conocer datos del bindeo, uptime y process id.';
	echo;

	echo -e '\tbenchmark [N]\n\t\tEjecuta un pequeño benchmark para medir el rendimiento de Basher ante N peticiones\n\t\t(request) solicitados.Por defecto se evaluan 1000 request.';
	echo;

	echo -e '\t-h\n\t--help\n\t\tMuestra esta ayuda.';
	echo;

}

##
##	MAIN
##

if [ "$#" -ge 1 ];
then
	case $1 in
		start)
			if [[ "$#" -ge 1 && "$#" -le 3 ]];
			then
				start "${@:2}";
			else
				echo 'La cantidad de parámetros es erronea!. Consulte la ayuda';
			fi
			;;
		stop)
			if [[ "$#" -eq 1 ]];
			then
				stop;
			else
				echo 'La cantidad de parámetros es erronea!. Consulte la ayuda';
			fi
			;;
			
		restart)
			if [[ "$#" -eq 1 ]];
			then
				restart;
			else
				echo 'La cantidad de parámetros es erronea!. Consulte la ayuda';
			fi
			;;
		status)
			if [[ "$#" -eq 1 ]];
			then
				status;
			else
				echo 'La cantidad de parámetros es erronea!. Consulte la ayuda';
			fi
			;;
		benchmark)
			if [[ "$#" -ge 1 && "$#" -le 2 ]];
			then
				benchmark "${@:2}";
			else
				echo 'La cantidad de parámetros es erronea!. Consulte la ayuda';
			fi
			;;	

		--help)
			mostrarAyuda;;
		-h)
			mostrarAyuda;;
		*)
			echo -e 'Parámetro no reconocido. Consulte la ayuda:\n\t$ ./basherCtl --help';;
	esac 
	echo;
else
	mostrarAyuda;
fi